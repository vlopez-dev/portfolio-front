name: Docker Deploy

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: 'master'
      - name: Check out code
        run: |
            echo "Checking out code..."
            git status
            git log -1
      - name: Deploy over SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.IP_ADRESS }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            echo "SSH connection successful"
            APP_DIR="/home/vlopez/portafolio/portfolio-front"
            cd "$APP_DIR"
            git pull origin master

            # Detect compose command
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            # Find compose file (current dir or parent)
            if [ -f docker-compose.yml ] || [ -f docker-compose.yaml ]; then
              echo "Using compose file in $APP_DIR"
            elif [ -f ../docker-compose.yml ] || [ -f ../docker-compose.yaml ]; then
              echo "Using compose file in parent dir"
              cd ..
            else
              echo "ERROR: No docker-compose.yml found in $APP_DIR or parent" >&2
              exit 1
            fi

            # Determine available services
            SERVICES_LIST=$($DC config --services)
            SERVICES=""
            for SVC in frontend portafolioback backend web; do
              if echo "$SERVICES_LIST" | grep -q "^$SVC$"; then
                SERVICES="$SERVICES $SVC"
              fi
            done

            if [ -z "${SERVICES// /}" ]; then
              echo "ERROR: None of the expected services (frontend, portafolioback, backend, web) found." >&2
              echo "Available services:" >&2
              echo "$SERVICES_LIST" >&2
              exit 1
            fi

            echo "Stopping services: $SERVICES"
            $DC stop $SERVICES || true

            echo "Building services: $SERVICES"
            $DC build --no-cache $SERVICES

            echo "Starting services: $SERVICES"
            $DC up -d --remove-orphans $SERVICES


